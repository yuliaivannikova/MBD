/* (c) 2025 Kenny Young
 * This code is licensed under the MIT License.
 * https://github.com/tabascq/PuzzleJS
 */

 body.designer-mode {
    margin-right: 300px;
 }

 .puzzle-designer {
    position: fixed;
    Background-color: #cccccc;
    padding: 10px;
    right: 0px;
    top: 0px;
    width: 300px;
    height: 100vh;
    overflow-y: auto;
    font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
  }

 .puzzle-designer input, .puzzle-designer select, .puzzle-designer textarea {
    margin-bottom: 10px;
    font-family: 'Courier New', Courier, monospace;
 }

 .puzzle-designer input, .puzzle-designer textarea {
    width: 240px;
    font-family: 'Courier New', Courier, monospace;
 }

 .puzzle-designer .multi-select {
    display: flex;
    flex-direction: column;
 }

 .puzzle-designer .no-selection-message {
    font-style: italic;
 }

 .puzzle-designer.has-selection .no-selection-message {
    display: none;
 }

 .puzzle-designer .category-header {
    background-color: #777;
    color: white;
    cursor: pointer;
    padding: 10px;
    width: 260px;
    border: none;
    text-align: left;
    outline: none;
    font-size: 15px;
    display: none;
}

.puzzle-designer.has-selection .category-header, .puzzle-designer .category-header.always-visible {
    display: block;
}
  
.puzzle-designer .category-header.open, .puzzle-designer .category-header:hover {
    background-color: #555;
}
  
.puzzle-designer .category-header:after {
   content: '\002B';
   color: white;
   font-weight: bold;
   float: right;
   margin-left: 5px;
 }
 
 .puzzle-designer .category-header.open:after {
   content: "\2212";
 }
 
 .puzzle-designer .category-contents {
    padding: 0 18px;
    width: 244px;
    max-height: 0;
    overflow: hidden;
    transition: max-height 0.2s ease-out;
    background-color: #f1f1f1;
}

.puzzle-designer .property-header.recordable:after {
   content: 'â­•';
   font-weight: bold;
   float: right;
   margin-left: 5px;
   alt: 'not recording';
   cursor: pointer;
}
 
.puzzle-designer .property-header.recordable.recording:after {
   content: "ðŸ”´";
   alt: 'recording';
   cursor: pointer;
}